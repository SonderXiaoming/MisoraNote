name: misora_note Release

on:
  push:
    tags:
      - 'v*.*.*'  # 触发条件：推送版本标签，如 v1.0.0
  workflow_dispatch:  # 允许手动触发

jobs:
  # Windows 构建任务
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.8.0'  # 指定 Flutter 版本
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Windows EXE
        run: flutter build windows --release

      - name: Create Windows ZIP
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          Compress-Archive -Path build\windows\x64\runner\Release\* -DestinationPath "misora_note_${version}_windows_x64.zip"

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: misora_note_${{ steps.get_version.outputs.VERSION }}_windows_x64.zip

  # macOS 构建任务 (DMG)
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.8.0'
          channel: 'stable'

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS APP
        run: flutter build macos --release

      - name: Create DMG
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          # 安装 create-dmg
          brew install create-dmg
          
          # 创建 DMG
          create-dmg \
            --volname "MisoraNote" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            "misora_note_${VERSION}_macos.dmg" \
            "build/macos/Build/Products/Release/misora_note.app" || true
          
          # 如果 create-dmg 失败，使用备用方法
          if [ ! -f "misora_note_${VERSION}_macos.dmg" ]; then
            hdiutil create -volname "MisoraNote" -srcfolder "build/macos/Build/Products/Release/misora_note.app" -ov -format UDZO "misora_note_${VERSION}_macos.dmg"
          fi

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: misora_note_${{ steps.get_version.outputs.VERSION }}_macos.dmg

  # Android 构建任务 (APK)
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.8.0'
          channel: 'stable'

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: flutter pub get

      - name: Build Android APK
        run: flutter build apk --release --split-per-abi

      - name: Build Android App Bundle
        run: flutter build appbundle --release

      - name: Rename APK files
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk build/app/outputs/flutter-apk/misora_note_${VERSION}_armeabi-v7a.apk
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk build/app/outputs/flutter-apk/misora_note_${VERSION}_arm64-v8a.apk
          mv build/app/outputs/flutter-apk/app-x86_64-release.apk build/app/outputs/flutter-apk/misora_note_${VERSION}_x86_64.apk
          mv build/app/outputs/bundle/release/app-release.aab build/app/outputs/bundle/release/misora_note_${VERSION}.aab

      - name: Upload Android APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            build/app/outputs/flutter-apk/misora_note_${{ steps.get_version.outputs.VERSION }}_armeabi-v7a.apk
            build/app/outputs/flutter-apk/misora_note_${{ steps.get_version.outputs.VERSION }}_arm64-v8a.apk
            build/app/outputs/flutter-apk/misora_note_${{ steps.get_version.outputs.VERSION }}_x86_64.apk

      - name: Upload Android App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/misora_note_${{ steps.get_version.outputs.VERSION }}.aab

  # iOS 构建任务 (IPA)
  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.8.0'
          channel: 'stable'

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: flutter pub get

      - name: Build iOS (without code signing)
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          flutter build ios --release --no-codesign
          
          # 创建 IPA (未签名，仅用于分发测试)
          cd build/ios/iphoneos
          mkdir Payload
          cp -r Runner.app Payload/
          zip -r "misora_note_${VERSION}_ios_unsigned.ipa" Payload
          mv "misora_note_${VERSION}_ios_unsigned.ipa" ../../..

      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: misora_note_${{ steps.get_version.outputs.VERSION }}_ios_unsigned.ipa

  # Linux 构建任务
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.8.0'
          channel: 'stable'

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux
        run: flutter build linux --release

      - name: Create Linux Archive
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          cd build/linux/x64/release/bundle
          tar -czf "../../../../../misora_note_${VERSION}_linux_x64.tar.gz" *

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-tar
          path: misora_note_${{ steps.get_version.outputs.VERSION }}_linux_x64.tar.gz

  # 创建 GitHub Release
  create-release:
    needs: [build-windows, build-macos, build-android, build-ios, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows-exe/misora_note_${{ steps.get_version.outputs.VERSION }}_windows_x64.zip
            artifacts/macos-dmg/misora_note_${{ steps.get_version.outputs.VERSION }}_macos.dmg
            artifacts/android-apk/misora_note_${{ steps.get_version.outputs.VERSION }}_armeabi-v7a.apk
            artifacts/android-apk/misora_note_${{ steps.get_version.outputs.VERSION }}_arm64-v8a.apk
            artifacts/android-apk/misora_note_${{ steps.get_version.outputs.VERSION }}_x86_64.apk
            artifacts/android-aab/misora_note_${{ steps.get_version.outputs.VERSION }}.aab
            artifacts/ios-ipa/misora_note_${{ steps.get_version.outputs.VERSION }}_ios_unsigned.ipa
            artifacts/linux-tar/misora_note_${{ steps.get_version.outputs.VERSION }}_linux_x64.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 🚀 MisoraNote Release ${{ steps.get_version.outputs.VERSION }}
            
            ### 📦 下载说明
            - **Windows**: `misora_note_${{ steps.get_version.outputs.VERSION }}_windows_x64.zip` - 解压后运行 `misora_note.exe`
            - **macOS**: `misora_note_${{ steps.get_version.outputs.VERSION }}_macos.dmg` - 双击安装
            - **Android**: 
              - ARM64: `misora_note_${{ steps.get_version.outputs.VERSION }}_arm64-v8a.apk` (推荐，适用于大多数现代设备)
              - ARMv7: `misora_note_${{ steps.get_version.outputs.VERSION }}_armeabi-v7a.apk` (适用于较老的设备)
              - x86_64: `misora_note_${{ steps.get_version.outputs.VERSION }}_x86_64.apk` (适用于模拟器)
              - Google Play: `misora_note_${{ steps.get_version.outputs.VERSION }}.aab`
            - **iOS**: `misora_note_${{ steps.get_version.outputs.VERSION }}_ios_unsigned.ipa` (未签名，需要自行签名)
            - **Linux**: `misora_note_${{ steps.get_version.outputs.VERSION }}_linux_x64.tar.gz` - 解压后运行 `misora_note`
            
            ### 📝 更新内容
            请查看下方的自动生成的发布说明。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
